import pyaudio
import wave
import pywt
import json
import time
import os
from datetime import datetime

def record_audio(output_dir="recordings", record_seconds=10):
    """Records audio from the microphone, saves to a unique WAV file, returns filename."""
    chunk = 1024
    sample_format = pyaudio.paInt16
    channels = 1
    fs = 44100

    p = pyaudio.PyAudio()

    stream = p.open(format=sample_format,
                    channels=channels,
                    rate=fs,
                    frames_per_buffer=chunk,
                    input=True)

    frames = []

    print(f"Recording for {record_seconds} seconds...")

    for i in range(0, int(fs / chunk * record_seconds)):
        data = stream.read(chunk)
        frames.append(data)

    stream.stop_stream()
    stream.close()
    p.terminate()

    # Create a unique filename based on timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    wav_filename = os.path.join(output_dir, f"recording_{timestamp}.wav")

    # Ensure the directory exists
    os.makedirs(output_dir, exist_ok=True)

    wf = wave.open(wav_filename, 'wb')
    wf.setnchannels(channels)
    wf.setsampwidth(p.get_sample_size(sample_format))
    wf.setframerate(fs)
    wf.writeframes(b''.join(frames))
    wf.close()
    print(f"Recording saved to {wav_filename}")
    return wav_filename

def process_audio(wav_file, output_dir="wavelet_data"):
    """Processes a WAV file with Haar wavelet transform, saves to unique JSON."""
    wf = wave.open(wav_file, 'rb')
    frames = wf.readframes(-1)
    frames_int16 = wave.struct.unpack(f'{wf.getnframes()}h', frames)

    coeffs = pywt.wavedec(frames_int16, 'haar', level=4)

    output_data = {
        "a4": coeffs[0].tolist(),
        "d4": coeffs[1].tolist(),
        "d3": coeffs[2].tolist(),
        "d1": coeffs[4].tolist(),
    }

    # Create a unique filename based on the WAV filename's timestamp
    timestamp = os.path.splitext(os.path.basename(wav_file))[0].split('_')[-2:]
    timestamp = '_'.join(timestamp)
    json_filename = os.path.join(output_dir, f"wavelet_{timestamp}.json")

    # Ensure the directory exists
    os.makedirs(output_dir, exist_ok=True)

    with open(json_filename, "w") as f:
        json.dump(output_data, f, indent=4)
    print(f"Wavelet data saved to {json_filename}")
    return json_filename

# --- Main Execution ---
if __name__ == "__main__":
    wav_filename = record_audio()
    json_filename = process_audio(wav_filename)
    time.sleep(1)
    print("Done!")
